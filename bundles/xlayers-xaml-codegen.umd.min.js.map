{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@xlayers/xaml-codegen/lib/codegenvisitor.service.ts","ng://@xlayers/xaml-codegen/lib/xmlcodegenvisitor.service.ts","ng://@xlayers/xaml-codegen/lib/shape.service.ts","ng://@xlayers/xaml-codegen/lib/xamarin-forms-codegenvisitor.service.ts","ng://@xlayers/xaml-codegen/lib/xaml-codegen.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__values","o","Symbol","iterator","m","next","value","done","TypeError","CodeGenVisitor","generateTemplate","ast","template","visit","join","depth","_this","layers","isArray","_class","visitText","visitBitmap","shape","visitShape","visitOther","forEach","layer","visitLayer","content","push","colorRatioToHex","color","Math","round","red","toString","padStart","green","blue","checkLayersForBorder","border","_b","tslib_1.__values","_c","checkForBorder","parent","frame","x","y","width","height","style","borders","shapeVisited","checkLayersForBackground","background","checkForBackground","fills","alpha","XmlCodeGenVisitor","_super","indentationSymbol","tslib_1.__extends","openTag","tag","attributes","autoclose","closeTag","indent","indentation","repeat","split","Point","strOrX","undefined","coords","stringToCoords","decRound","number","distanceRounded","point","distance","sqrt","distanceSquared","distanceSquaredRounded","pow","string","match","groups","Cluster","points","addPoint","updateBarycenter","avgX","avgY","barycenter","Shape","hasCurveFrom","curveFrom","hasCurveTo","curveTo","isOrthogonal","A","B","C","abs","shapeRecognitionPrecision","clusterPoints4","tempBarycenterX","tempBarycenterY","clusters","topLeft","topRight","bottomLeft","bottomRight","isRectangle","corner","topLength","bottomLength","leftLength","rightLength","isLine","isRound","circle","center","radius2","radiusCenter2","isCircle","isCircleCentered","some","XamarinFormsCodeGenVisitor","svgCodeGen","fileList","openGroup","image","_ref","attr","attributedString","fontAttribute","MSAttributedStringFontAttribute","colorAttribute","MSAttributedStringColorAttribute","Text","FontSize","size","FontFamily","name","TextColor","Opacity","keys","map","key","a","visitRound","visitRectangle","visitLine","visitSvg","generateAbsoluteLayout","svgFileName","sanitizeSvgFileName","do_objectID","aggregate","uri","kind","toLowerCase","replace","consumeFileList","tempFileList","Injectable","args","providedIn","SvgCodeGenService","XamlCodeGenModule","NgModule","imports","CssCodeGenModule","SvgCodeGenModule","SketchLibModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/**\r\n * Visitor-like pattern used for code generation purposes, by iterating through an AST and\r\n * delegating the codegen to its subclasses.\r\n */\r\nexport abstract class CodeGenVisitor {\r\n  /**\r\n   * Generates a string template by visiting the tree\r\n   * @param ast The Sketch AST\r\n   */\r\n  generateTemplate(ast: SketchMSLayer): string {\r\n    const template: Array<string> = [];\r\n    this.visit(ast, template, 2);\r\n    return template.join('\\n');\r\n  }\r\n\r\n  protected visit(\r\n    ast: SketchMSLayer,\r\n    template: string[] = [],\r\n    depth: number = 0\r\n  ): string {\r\n    if (ast.layers && Array.isArray(ast.layers)) {\r\n      ast.layers.forEach(layer => this.visitLayer(layer, template, depth));\r\n    } else {\r\n      if ((ast as any)._class === 'text') {\r\n        return this.visitText(ast);\r\n      } else if ((ast as any)._class === 'bitmap') {\r\n        return this.visitBitmap(ast);\r\n      } else if ((ast as any).shape) {\r\n        return this.visitShape(ast);\r\n      } else {\r\n        return this.visitOther(ast);\r\n      }\r\n    }\r\n  }\r\n\r\n  protected visitLayer(\r\n    layer: SketchMSLayer,\r\n    template: string[],\r\n    depth: number\r\n  ) {\r\n    const content = this.visit(layer, template, depth + 1);\r\n    if (content) {\r\n      template.push(content);\r\n    }\r\n  }\r\n\r\n  protected visitShape(ast: SketchMSLayer): string {\r\n    return (ast as any).shape;\r\n  }\r\n\r\n  protected abstract visitText(ast: SketchMSLayer): string;\r\n  protected abstract visitBitmap(ast: SketchMSLayer): string;\r\n  protected abstract visitOther(ast: SketchMSLayer): string;\r\n  protected abstract openTag(tag: string): string;\r\n  protected abstract closeTag(tag: string): string;\r\n\r\n  protected colorRatioToHex(color: SketchMSColor) {\r\n    return (\r\n      '#' +\r\n      Math.round(color.red * 255)\r\n        .toString(16)\r\n        .padStart(2, '0') +\r\n      Math.round(color.green * 255)\r\n        .toString(16)\r\n        .padStart(2, '0') +\r\n      Math.round(color.blue * 255)\r\n        .toString(16)\r\n        .padStart(2, '0')\r\n    );\r\n  }\r\n\r\n  // return colorhex: string or false\r\n  protected checkLayersForBorder(ast: SketchMSLayer): string | boolean {\r\n    let border: string | boolean = false;\r\n    for (const layer of ast.layers) {\r\n      border = this.checkForBorder(ast, layer);\r\n      if (border !== false) {\r\n        return border;\r\n      }\r\n    }\r\n    return border;\r\n  }\r\n\r\n  // return colorhex: string or false\r\n  private checkForBorder(\r\n    parent: SketchMSLayer,\r\n    ast: SketchMSLayer\r\n  ): string | boolean {\r\n    if (\r\n      ast.frame.x === 0 &&\r\n      ast.frame.y === 0 &&\r\n      parent.frame.width === ast.frame.width &&\r\n      parent.frame.height === ast.frame.height &&\r\n      !!ast.style.borders\r\n    ) {\r\n      (ast as any).shapeVisited = true;\r\n      return this.colorRatioToHex(ast.style.borders[0].color);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // return colorhex: string or false\r\n  protected checkLayersForBackground(ast: SketchMSLayer): string | boolean {\r\n    let background: string | boolean = false;\r\n    for (const layer of ast.layers) {\r\n      background = this.checkForBackground(ast, layer);\r\n      if (background !== false) {\r\n        return background;\r\n      }\r\n    }\r\n    return background;\r\n  }\r\n\r\n  // return colorhex: string or false\r\n  private checkForBackground(\r\n    parent: SketchMSLayer,\r\n    ast: SketchMSLayer\r\n  ): string | boolean {\r\n    if (\r\n      ast.frame.x === 0 &&\r\n      ast.frame.y === 0 &&\r\n      parent.frame.width === ast.frame.width &&\r\n      parent.frame.height === ast.frame.height &&\r\n      !!ast.style.fills &&\r\n      ast.style.fills[0].color.alpha !== 0\r\n    ) {\r\n      (ast as any).shapeVisited = true;\r\n      return this.colorRatioToHex(ast.style.fills[0].color);\r\n    }\r\n    return false;\r\n  }\r\n}\r\n","import { CodeGenVisitor } from './codegenvisitor.service';\r\nimport { RouteConfigLoadEnd } from '@angular/router';\r\n\r\n/**\r\n * @see CodeGenVisitor implementation that can be used to generate code in an XML-based representation.\r\n */\r\nexport abstract class XmlCodeGenVisitor extends CodeGenVisitor {\r\n  private indentationSymbol = '  '; // 2 spaces ftw\r\n\r\n  protected openTag(tag: string, attributes = [], autoclose = false): string {\r\n    return `<${tag}${\r\n      attributes.length !== 0 ? ' ' + attributes.join(' ') : ''\r\n    }${autoclose ? ' /' : ''}>`;\r\n  }\r\n\r\n  protected closeTag(tag: string): string {\r\n    return `</${tag}>`;\r\n  }\r\n\r\n  protected indent(n: number, content: string): string {\r\n    const indentation = !!n ? this.indentationSymbol.repeat(n) : '';\r\n    return indentation + content.split('\\n').join('\\n' + indentation);\r\n  }\r\n}\r\n","// class to recognise if sketchapp shape is a rectangle, a line, a circle(TODO) or something else\r\n\r\nclass Point {\r\n    x: number;\r\n    y: number;\r\n\r\n    constructor(str: string);\r\n    constructor(x: number, y: number);\r\n    constructor(strOrX, y?) {\r\n        // a string containing the coords is input\r\n        if (y === undefined) {\r\n            const coords: any = this.stringToCoords(strOrX);\r\n            if (coords) {\r\n                this.x = this.decRound(coords.x);\r\n                this.y = this.decRound(coords.y);\r\n            }\r\n            // the coords numbers are input\r\n        } else {\r\n            this.x = this.decRound(strOrX as number);\r\n            this.y = this.decRound(y);\r\n        }\r\n    }\r\n\r\n    // 2 decimals rounding\r\n    decRound(number: number): number {\r\n        return Math.round(number * 100 + 0.001) / 100;\r\n    }\r\n\r\n    distanceRounded(point: Point): number {\r\n        return this.decRound(this.distance(point));\r\n    }\r\n    distance(point: Point): number {\r\n        return Math.sqrt(this.distanceSquared(point));\r\n    }\r\n    distanceSquaredRounded(point: Point): number {\r\n        return this.decRound(this.distanceSquared(point));\r\n    }\r\n    distanceSquared(point: Point): number {\r\n        return Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2);\r\n    }\r\n\r\n    stringToCoords(string: string): RegExpMatchArray['groups'] | boolean {\r\n        // match two numbers in a string of the form '{123, 456}'\r\n        // and place them in two capturing groups named 'x' and 'y'\r\n        // numbers may be negatives and may be int or float\r\n        const regex = /{(?<x>\\-?\\d(?:\\.\\d+)?(?:e\\-?\\d+)?),\\s?(?<y>\\-?\\d(?:\\.\\d+)?(?:e\\-?\\d+)?)}/;\r\n        const match = string.match(regex);\r\n        if (!!match) {\r\n            // match.groups: {x: number, y: number}\r\n            return match.groups;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\nclass Cluster {\r\n    points: Point[] = [];\r\n    barycenter: Point;\r\n\r\n    constructor(point?: Point) {\r\n        if (point !== undefined) {\r\n            this.addPoint(point);\r\n        }\r\n    }\r\n\r\n    updateBarycenter(): void {\r\n        let avgX = 0;\r\n        let avgY = 0;\r\n        this.points.forEach(point => {\r\n            avgX += point.x;\r\n            avgY += point.y;\r\n        });\r\n        avgX /= this.points.length;\r\n        avgY /= this.points.length;\r\n        this.barycenter = new Point(avgX, avgY);\r\n    }\r\n\r\n    addPoint(point: Point): void {\r\n        this.points.push(point);\r\n        this.updateBarycenter();\r\n    }\r\n}\r\n\r\nexport class Shape {\r\n    static readonly shapeRecognitionPrecision = 0.05;\r\n    points: Point[];\r\n    topLeft: Point;\r\n    topRight: Point;\r\n    bottomLeft: Point;\r\n    bottomRight: Point;\r\n\r\n    // check if ABC is orthogonal on B\r\n    static isOrthogonal(A: Point, B: Point, C: Point): boolean {\r\n        return Math.abs(A.distanceSquared(B) + B.distanceSquared(C) - A.distanceSquared(C)) < Shape.shapeRecognitionPrecision;\r\n    }\r\n\r\n    constructor(points: SketchMSCurvePoint[]) {\r\n        this.points = [];\r\n\r\n        points.forEach(point => {\r\n            this.points.push(new Point(point.point));\r\n\r\n            if (point.hasCurveFrom === true) {\r\n                this.points.push(new Point(point.curveFrom));\r\n            }\r\n            if (point.hasCurveTo === true) {\r\n                this.points.push(new Point(point.curveTo));\r\n            }\r\n        });\r\n    }\r\n\r\n    // divide the points in 4 clusters\r\n    clusterPoints4(): any {\r\n        let tempBarycenterX = 0,\r\n            tempBarycenterY = 0;\r\n        this.points.forEach(point => {\r\n            tempBarycenterX += point.x;\r\n            tempBarycenterY += point.y;\r\n        });\r\n        const barycenter = new Point(tempBarycenterX / this.points.length, tempBarycenterY / this.points.length);\r\n\r\n        const clusters: any = {};\r\n        clusters.topLeft = new Cluster();\r\n        clusters.topRight = new Cluster();\r\n        clusters.bottomLeft = new Cluster();\r\n        clusters.bottomRight = new Cluster();\r\n\r\n        this.points.forEach(point => {\r\n            if (point.y < barycenter.y) {\r\n                // TOP\r\n                if (point.x < barycenter.x) {\r\n                    // LEFT\r\n                    clusters.topLeft.addPoint(point);\r\n                } else {\r\n                    // RIGHT\r\n                    clusters.topRight.addPoint(point);\r\n                }\r\n                // BOTTOM\r\n            } else {\r\n                if (point.x < barycenter.x) {\r\n                    // LEFT\r\n                    clusters.bottomLeft.addPoint(point);\r\n                } else {\r\n                    // RIGHT\r\n                    clusters.bottomRight.addPoint(point);\r\n                }\r\n            }\r\n        });\r\n\r\n        return clusters;\r\n    }\r\n\r\n    isRectangle(): boolean {\r\n        if (this.points.length < 4) {\r\n            return false;\r\n        }\r\n\r\n        const clusters: any = this.clusterPoints4();\r\n\r\n        for (const corner in clusters) {\r\n            if (clusters[corner].points.length === 0) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        const topLength = clusters.topLeft.barycenter.distance(clusters.topRight.barycenter);\r\n        const bottomLength = clusters.bottomLeft.barycenter.distance(clusters.bottomRight.barycenter);\r\n        const leftLength = clusters.topLeft.barycenter.distance(clusters.bottomLeft.barycenter);\r\n        const rightLength = clusters.topRight.barycenter.distance(clusters.bottomRight.barycenter);\r\n\r\n        return Math.abs(topLength - bottomLength) < Shape.shapeRecognitionPrecision\r\n            && Math.abs(leftLength - rightLength) < Shape.shapeRecognitionPrecision\r\n            && Shape.isOrthogonal(clusters.bottomLeft.barycenter, clusters.topLeft.barycenter, clusters.topRight.barycenter);\r\n    }\r\n\r\n    isLine(): boolean {\r\n        return this.points.length === 2\r\n            && Math.abs(this.points[0].y - this.points[1].y) < Shape.shapeRecognitionPrecision;\r\n    }\r\n\r\n    isRound(): boolean {\r\n        if (this.isRectangle() || this.isLine()) {\r\n            return false;\r\n        }\r\n\r\n        const circle = new Cluster();\r\n        this.points.forEach(point => {\r\n            circle.addPoint(point);\r\n        });\r\n\r\n        // if the points are not equally sprayed around the circle,\r\n        // the barycenter may be different from the actual center of the circle\r\n        const center = new Point(0.5, 0.5);\r\n        const radius2 = circle.points[0].distanceSquaredRounded(circle.barycenter);\r\n        const radiusCenter2 = circle.points[0].distanceSquaredRounded(center);\r\n\r\n        let isCircle = true;\r\n        let isCircleCentered = true;\r\n\r\n        circle.points.some(point => {\r\n            if (Math.abs(point.distanceSquaredRounded(circle.barycenter) - radius2) > Shape.shapeRecognitionPrecision * 2) {\r\n                isCircle = false;\r\n                return true;\r\n            }\r\n        });\r\n        circle.points.some(point => {\r\n            if (Math.abs(point.distanceSquaredRounded(center) - radiusCenter2) > Shape.shapeRecognitionPrecision * 2) {\r\n                isCircleCentered = false;\r\n                return true;\r\n            }\r\n        });\r\n\r\n        return isCircle || isCircleCentered;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { XmlCodeGenVisitor } from './xmlcodegenvisitor.service';\r\nimport { Shape } from './shape.service';\r\nimport { SvgCodeGenService } from '@xlayers/svg-codegen';\r\n\r\n/**\r\n * @see XmlCodeGenVisitor implementation that can be used to generate Xamarin.Forms code.\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class XamarinFormsCodeGenVisitor extends XmlCodeGenVisitor {\r\n  constructor(private readonly svgCodeGen: SvgCodeGenService) {\r\n    super();\r\n  }\r\n\r\n  fileList = [];\r\n\r\n  protected visitLayer(\r\n    layer: SketchMSLayer,\r\n    template: string[] = [],\r\n    depth: number = 0\r\n  ) {\r\n    let content;\r\n\r\n    if ((layer as any)._class === 'group') {\r\n      template.push(this.indent(depth, this.openGroup(layer)));\r\n      content = this.visit(layer, template, depth + 1);\r\n      template.push(this.indent(depth + 1, this.closeTag('AbsoluteLayout')));\r\n      template.push(this.indent(depth, this.closeTag('Frame')));\r\n    } else {\r\n      content = this.visit(layer, template, depth + 1);\r\n    }\r\n\r\n    if (content) {\r\n      template.push(this.indent(depth + 1, content));\r\n    }\r\n  }\r\n\r\n  protected visitBitmap(ast: SketchMSLayer): string {\r\n    return `<Image Source=\"${(ast as any).image._ref}\">`;\r\n  }\r\n\r\n  protected visitText(ast: SketchMSLayer): string {\r\n    const attr: any = {};\r\n    const string = ast.attributedString;\r\n    const fontAttribute =\r\n      string.attributes[0].attributes.MSAttributedStringFontAttribute\r\n        .attributes;\r\n    const colorAttribute = (string.attributes[0].attributes as any)\r\n      .MSAttributedStringColorAttribute;\r\n\r\n    attr.Text = string.string;\r\n    attr.FontSize = fontAttribute.size;\r\n    attr.FontFamily = fontAttribute.name;\r\n    attr.TextColor = this.colorRatioToHex(colorAttribute);\r\n    attr.Opacity = colorAttribute.alpha;\r\n    attr['AbsoluteLayout.LayoutBounds'] = `${Math.round(\r\n      ast.frame.x\r\n    )}, ${Math.round(ast.frame.y)}, ${Math.round(\r\n      ast.frame.width\r\n    )}, ${Math.round(ast.frame.height)}`;\r\n\r\n    return (\r\n      '<Label ' +\r\n      Object.keys(attr)\r\n        .map(function(key) {\r\n          return key + '=\"' + attr[key] + '\"';\r\n        })\r\n        .join('\\n' + ' '.repeat(7)) +\r\n      '/>'\r\n    );\r\n  }\r\n\r\n  protected visitShape(ast: SketchMSLayer): string {\r\n    if ((ast as any).shapeVisited === true) {\r\n      return null;\r\n    }\r\n\r\n    const a = new Shape((ast as any).points);\r\n    if (a.isRound()) {\r\n      return this.visitRound(ast);\r\n    } else if (a.isRectangle()) {\r\n      return this.visitRectangle(ast);\r\n    } else if (a.isLine()) {\r\n      return this.visitLine(ast);\r\n    } else {\r\n      return this.visitSvg(ast);\r\n    }\r\n  }\r\n\r\n  protected visitOther(ast: SketchMSLayer): string {\r\n    if ((ast as any).shapeVisited === true) {\r\n      return null;\r\n    }\r\n\r\n    if (\r\n      (ast as any)._class === 'oval' ||\r\n      ((ast as any)._class === 'rectangle' &&\r\n        (!!ast.style.fills || !!ast.style.borders))\r\n    ) {\r\n      return (\r\n        `<Frame ` +\r\n        this.generateAbsoluteLayout(ast) +\r\n        ` CornerRadius=\"${\r\n          (ast as any)._class === 'oval' ? ast.frame.width / 2 : '0'\r\n        }\"` +\r\n        (!!ast.style.fills\r\n          ? ' BackgroundColor=\"' +\r\n            this.colorRatioToHex(ast.style.fills[0].color) +\r\n            '\" Opacity=\"' +\r\n            ast.style.fills[0].color.alpha +\r\n            '\"'\r\n          : ' BackgroundColor=\"Transparent\"') +\r\n        (!!ast.style.borders\r\n          ? ' BorderColor=\"' +\r\n            this.colorRatioToHex(ast.style.borders[0].color) +\r\n            '\"'\r\n          : '') +\r\n        ' HasShadow=\"false\" />'\r\n      );\r\n    }\r\n  }\r\n\r\n  protected visitRound(ast: SketchMSLayer): string {\r\n    return (\r\n      `<Frame ` +\r\n      this.generateAbsoluteLayout(ast) +\r\n      ` CornerRadius=\"${ast.frame.width / 2}\"` +\r\n      (!!ast.style.fills\r\n        ? ' BackgroundColor=\"' +\r\n          this.colorRatioToHex(ast.style.fills[0].color) +\r\n          '\" Opacity=\"' +\r\n          ast.style.fills[0].color.alpha +\r\n          '\"'\r\n        : ' BackgroundColor=\"Transparent\"') +\r\n      (!!ast.style.borders\r\n        ? ' BorderColor=\"' +\r\n          this.colorRatioToHex(ast.style.borders[0].color) +\r\n          '\"'\r\n        : '') +\r\n      ' HasShadow=\"false\" />'\r\n    );\r\n  }\r\n\r\n  protected visitRectangle(ast: SketchMSLayer): string {\r\n    if (!!ast.style.borders) {\r\n      return (\r\n        `<Frame ` +\r\n        this.generateAbsoluteLayout(ast) +\r\n        ` CornerRadius=\"0\"` +\r\n        ` BorderColor=\"${this.colorRatioToHex(ast.style.borders[0].color)}\"` +\r\n        (!!ast.style.fills\r\n          ? ` BackgroundColor=\"${this.colorRatioToHex(\r\n              ast.style.fills[0].color\r\n            )}\"` + ` Opacity=\"${ast.style.fills[0].color.alpha}\"`\r\n          : ` BackgroundColor=\"Transparent\"`) +\r\n        ` HasShadow=\"false\" />`\r\n      );\r\n    } else if (!!ast.style.fills) {\r\n      return (\r\n        `<BoxView ` +\r\n        this.generateAbsoluteLayout(ast) +\r\n        ` Color=\"${this.colorRatioToHex(ast.style.fills[0].color)}\"` +\r\n        ` Opacity=\"${ast.style.fills[0].color.alpha}\" />`\r\n      );\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  protected visitLine(ast: SketchMSLayer): string {\r\n    return (\r\n      `<BoxView AbsoluteLayout.LayoutBounds=\"${Math.round(\r\n        ast.frame.x\r\n      )}, ${Math.round(ast.frame.y)}, ${Math.round(ast.frame.width)}, 1\"` +\r\n      (!!ast.style.fills\r\n        ? ` Color=\"${this.colorRatioToHex(ast.style.fills[0].color)}\"` +\r\n          ` Opacity=\"${ast.style.fills[0].color.alpha}\" />`\r\n        : ` Color=\"${this.colorRatioToHex(ast.style.borders[0].color)}\"` +\r\n          ` Opacity=\"${ast.style.borders[0].color.alpha}\" />`)\r\n    );\r\n  }\r\n\r\n  protected visitSvg(ast: SketchMSLayer): string {\r\n    const svgFileName = this.sanitizeSvgFileName(ast.do_objectID);\r\n    this.fileList.push({\r\n      ...this.svgCodeGen.aggregate(ast)[0],\r\n      uri: svgFileName,\r\n      kind: 'xamarinForms'\r\n    });\r\n\r\n    return (\r\n      `<ffSvg:SvgCachedImage Source=\"resource://xLayers.path.to.${svgFileName}\"` +\r\n      `\\n` +\r\n      ` `.repeat(22) +\r\n      this.generateAbsoluteLayout(ast) +\r\n      `/>`\r\n    );\r\n  }\r\n\r\n  protected openGroup(ast: SketchMSLayer): string {\r\n    const border = this.checkLayersForBorder(ast);\r\n    const background = this.checkLayersForBackground(ast);\r\n\r\n    return (\r\n      `<Frame ` +\r\n      this.generateAbsoluteLayout(ast) +\r\n      ` CornerRadius=\"0\" Padding=\"0\"` +\r\n      (border !== false ? ' BorderColor=\"' + border + '\"' : '') +\r\n      ' BackgroundColor=\"' +\r\n      (background !== false ? background : 'Transparent') +\r\n      '\"' +\r\n      ` HasShadow=\"false\">` +\r\n      `\\n  <AbsoluteLayout>`\r\n    );\r\n  }\r\n\r\n  private sanitizeSvgFileName(name: string): string {\r\n    return '_' + name.toLowerCase().replace(/[^a-z0-9\\_]/g, '_') + '.svg';\r\n  }\r\n\r\n  private generateAbsoluteLayout(ast: SketchMSLayer): string {\r\n    return `AbsoluteLayout.LayoutBounds=\"${Math.round(\r\n      ast.frame.x\r\n    )}, ${Math.round(ast.frame.y)}, ${Math.round(\r\n      ast.frame.width\r\n    )}, ${Math.round(ast.frame.height)}\"`;\r\n  }\r\n\r\n  consumeFileList(): any {\r\n    const tempFileList = this.fileList;\r\n    this.fileList = [];\r\n    return tempFileList;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CssCodeGenModule } from '@xlayers/css-codegen';\r\nimport { SketchLibModule } from '@xlayers/sketch-lib';\r\nimport { SvgCodeGenModule } from '@xlayers/svg-codegen';\r\n\r\n@NgModule({\r\n  imports: [CssCodeGenModule, SvgCodeGenModule, SketchLibModule]\r\n})\r\nexport class XamlCodeGenModule {}\r\n"]}