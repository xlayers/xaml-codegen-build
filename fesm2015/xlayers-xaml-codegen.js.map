{"version":3,"file":"xlayers-xaml-codegen.js","sources":["ng://@xlayers/xaml-codegen/lib/codegenvisitor.service.ts","ng://@xlayers/xaml-codegen/lib/xmlcodegenvisitor.service.ts","ng://@xlayers/xaml-codegen/lib/shape.service.ts","ng://@xlayers/xaml-codegen/lib/xamarin-forms-codegenvisitor.service.ts","ng://@xlayers/xaml-codegen/lib/xaml-codegen.module.ts"],"sourcesContent":["/**\r\n * Visitor-like pattern used for code generation purposes, by iterating through an AST and\r\n * delegating the codegen to its subclasses.\r\n */\r\nexport abstract class CodeGenVisitor {\r\n  /**\r\n   * Generates a string template by visiting the tree\r\n   * @param ast The Sketch AST\r\n   */\r\n  generateTemplate(ast: SketchMSLayer): string {\r\n    const template: Array<string> = [];\r\n    this.visit(ast, template, 2);\r\n    return template.join('\\n');\r\n  }\r\n\r\n  protected visit(\r\n    ast: SketchMSLayer,\r\n    template: string[] = [],\r\n    depth: number = 0\r\n  ): string {\r\n    if (ast.layers && Array.isArray(ast.layers)) {\r\n      ast.layers.forEach(layer => this.visitLayer(layer, template, depth));\r\n    } else {\r\n      if ((ast as any)._class === 'text') {\r\n        return this.visitText(ast);\r\n      } else if ((ast as any)._class === 'bitmap') {\r\n        return this.visitBitmap(ast);\r\n      } else if ((ast as any).shape) {\r\n        return this.visitShape(ast);\r\n      } else {\r\n        return this.visitOther(ast);\r\n      }\r\n    }\r\n  }\r\n\r\n  protected visitLayer(\r\n    layer: SketchMSLayer,\r\n    template: string[],\r\n    depth: number\r\n  ) {\r\n    const content = this.visit(layer, template, depth + 1);\r\n    if (content) {\r\n      template.push(content);\r\n    }\r\n  }\r\n\r\n  protected visitShape(ast: SketchMSLayer): string {\r\n    return (ast as any).shape;\r\n  }\r\n\r\n  protected abstract visitText(ast: SketchMSLayer): string;\r\n  protected abstract visitBitmap(ast: SketchMSLayer): string;\r\n  protected abstract visitOther(ast: SketchMSLayer): string;\r\n  protected abstract openTag(tag: string): string;\r\n  protected abstract closeTag(tag: string): string;\r\n\r\n  protected colorRatioToHex(color: SketchMSColor) {\r\n    return (\r\n      '#' +\r\n      Math.round(color.red * 255)\r\n        .toString(16)\r\n        .padStart(2, '0') +\r\n      Math.round(color.green * 255)\r\n        .toString(16)\r\n        .padStart(2, '0') +\r\n      Math.round(color.blue * 255)\r\n        .toString(16)\r\n        .padStart(2, '0')\r\n    );\r\n  }\r\n\r\n  // return colorhex: string or false\r\n  protected checkLayersForBorder(ast: SketchMSLayer): string | boolean {\r\n    let border: string | boolean = false;\r\n    for (const layer of ast.layers) {\r\n      border = this.checkForBorder(ast, layer);\r\n      if (border !== false) {\r\n        return border;\r\n      }\r\n    }\r\n    return border;\r\n  }\r\n\r\n  // return colorhex: string or false\r\n  private checkForBorder(\r\n    parent: SketchMSLayer,\r\n    ast: SketchMSLayer\r\n  ): string | boolean {\r\n    if (\r\n      ast.frame.x === 0 &&\r\n      ast.frame.y === 0 &&\r\n      parent.frame.width === ast.frame.width &&\r\n      parent.frame.height === ast.frame.height &&\r\n      !!ast.style.borders\r\n    ) {\r\n      (ast as any).shapeVisited = true;\r\n      return this.colorRatioToHex(ast.style.borders[0].color);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // return colorhex: string or false\r\n  protected checkLayersForBackground(ast: SketchMSLayer): string | boolean {\r\n    let background: string | boolean = false;\r\n    for (const layer of ast.layers) {\r\n      background = this.checkForBackground(ast, layer);\r\n      if (background !== false) {\r\n        return background;\r\n      }\r\n    }\r\n    return background;\r\n  }\r\n\r\n  // return colorhex: string or false\r\n  private checkForBackground(\r\n    parent: SketchMSLayer,\r\n    ast: SketchMSLayer\r\n  ): string | boolean {\r\n    if (\r\n      ast.frame.x === 0 &&\r\n      ast.frame.y === 0 &&\r\n      parent.frame.width === ast.frame.width &&\r\n      parent.frame.height === ast.frame.height &&\r\n      !!ast.style.fills &&\r\n      ast.style.fills[0].color.alpha !== 0\r\n    ) {\r\n      (ast as any).shapeVisited = true;\r\n      return this.colorRatioToHex(ast.style.fills[0].color);\r\n    }\r\n    return false;\r\n  }\r\n}\r\n","import { CodeGenVisitor } from './codegenvisitor.service';\r\nimport { RouteConfigLoadEnd } from '@angular/router';\r\n\r\n/**\r\n * @see CodeGenVisitor implementation that can be used to generate code in an XML-based representation.\r\n */\r\nexport abstract class XmlCodeGenVisitor extends CodeGenVisitor {\r\n  private indentationSymbol = '  '; // 2 spaces ftw\r\n\r\n  protected openTag(tag: string, attributes = [], autoclose = false): string {\r\n    return `<${tag}${\r\n      attributes.length !== 0 ? ' ' + attributes.join(' ') : ''\r\n    }${autoclose ? ' /' : ''}>`;\r\n  }\r\n\r\n  protected closeTag(tag: string): string {\r\n    return `</${tag}>`;\r\n  }\r\n\r\n  protected indent(n: number, content: string): string {\r\n    const indentation = !!n ? this.indentationSymbol.repeat(n) : '';\r\n    return indentation + content.split('\\n').join('\\n' + indentation);\r\n  }\r\n}\r\n","// class to recognise if sketchapp shape is a rectangle, a line, a circle(TODO) or something else\r\n\r\nclass Point {\r\n    x: number;\r\n    y: number;\r\n\r\n    constructor(str: string);\r\n    constructor(x: number, y: number);\r\n    constructor(strOrX, y?) {\r\n        // a string containing the coords is input\r\n        if (y === undefined) {\r\n            const coords: any = this.stringToCoords(strOrX);\r\n            if (coords) {\r\n                this.x = this.decRound(coords.x);\r\n                this.y = this.decRound(coords.y);\r\n            }\r\n            // the coords numbers are input\r\n        } else {\r\n            this.x = this.decRound(strOrX as number);\r\n            this.y = this.decRound(y);\r\n        }\r\n    }\r\n\r\n    // 2 decimals rounding\r\n    decRound(number: number): number {\r\n        return Math.round(number * 100 + 0.001) / 100;\r\n    }\r\n\r\n    distanceRounded(point: Point): number {\r\n        return this.decRound(this.distance(point));\r\n    }\r\n    distance(point: Point): number {\r\n        return Math.sqrt(this.distanceSquared(point));\r\n    }\r\n    distanceSquaredRounded(point: Point): number {\r\n        return this.decRound(this.distanceSquared(point));\r\n    }\r\n    distanceSquared(point: Point): number {\r\n        return Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2);\r\n    }\r\n\r\n    stringToCoords(string: string): RegExpMatchArray['groups'] | boolean {\r\n        // match two numbers in a string of the form '{123, 456}'\r\n        // and place them in two capturing groups named 'x' and 'y'\r\n        // numbers may be negatives and may be int or float\r\n        const regex = /{(?<x>\\-?\\d(?:\\.\\d+)?(?:e\\-?\\d+)?),\\s?(?<y>\\-?\\d(?:\\.\\d+)?(?:e\\-?\\d+)?)}/;\r\n        const match = string.match(regex);\r\n        if (!!match) {\r\n            // match.groups: {x: number, y: number}\r\n            return match.groups;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\nclass Cluster {\r\n    points: Point[] = [];\r\n    barycenter: Point;\r\n\r\n    constructor(point?: Point) {\r\n        if (point !== undefined) {\r\n            this.addPoint(point);\r\n        }\r\n    }\r\n\r\n    updateBarycenter(): void {\r\n        let avgX = 0;\r\n        let avgY = 0;\r\n        this.points.forEach(point => {\r\n            avgX += point.x;\r\n            avgY += point.y;\r\n        });\r\n        avgX /= this.points.length;\r\n        avgY /= this.points.length;\r\n        this.barycenter = new Point(avgX, avgY);\r\n    }\r\n\r\n    addPoint(point: Point): void {\r\n        this.points.push(point);\r\n        this.updateBarycenter();\r\n    }\r\n}\r\n\r\nexport class Shape {\r\n    static readonly shapeRecognitionPrecision = 0.05;\r\n    points: Point[];\r\n    topLeft: Point;\r\n    topRight: Point;\r\n    bottomLeft: Point;\r\n    bottomRight: Point;\r\n\r\n    // check if ABC is orthogonal on B\r\n    static isOrthogonal(A: Point, B: Point, C: Point): boolean {\r\n        return Math.abs(A.distanceSquared(B) + B.distanceSquared(C) - A.distanceSquared(C)) < Shape.shapeRecognitionPrecision;\r\n    }\r\n\r\n    constructor(points: SketchMSCurvePoint[]) {\r\n        this.points = [];\r\n\r\n        points.forEach(point => {\r\n            this.points.push(new Point(point.point));\r\n\r\n            if (point.hasCurveFrom === true) {\r\n                this.points.push(new Point(point.curveFrom));\r\n            }\r\n            if (point.hasCurveTo === true) {\r\n                this.points.push(new Point(point.curveTo));\r\n            }\r\n        });\r\n    }\r\n\r\n    // divide the points in 4 clusters\r\n    clusterPoints4(): any {\r\n        let tempBarycenterX = 0,\r\n            tempBarycenterY = 0;\r\n        this.points.forEach(point => {\r\n            tempBarycenterX += point.x;\r\n            tempBarycenterY += point.y;\r\n        });\r\n        const barycenter = new Point(tempBarycenterX / this.points.length, tempBarycenterY / this.points.length);\r\n\r\n        const clusters: any = {};\r\n        clusters.topLeft = new Cluster();\r\n        clusters.topRight = new Cluster();\r\n        clusters.bottomLeft = new Cluster();\r\n        clusters.bottomRight = new Cluster();\r\n\r\n        this.points.forEach(point => {\r\n            if (point.y < barycenter.y) {\r\n                // TOP\r\n                if (point.x < barycenter.x) {\r\n                    // LEFT\r\n                    clusters.topLeft.addPoint(point);\r\n                } else {\r\n                    // RIGHT\r\n                    clusters.topRight.addPoint(point);\r\n                }\r\n                // BOTTOM\r\n            } else {\r\n                if (point.x < barycenter.x) {\r\n                    // LEFT\r\n                    clusters.bottomLeft.addPoint(point);\r\n                } else {\r\n                    // RIGHT\r\n                    clusters.bottomRight.addPoint(point);\r\n                }\r\n            }\r\n        });\r\n\r\n        return clusters;\r\n    }\r\n\r\n    isRectangle(): boolean {\r\n        if (this.points.length < 4) {\r\n            return false;\r\n        }\r\n\r\n        const clusters: any = this.clusterPoints4();\r\n\r\n        for (const corner in clusters) {\r\n            if (clusters[corner].points.length === 0) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        const topLength = clusters.topLeft.barycenter.distance(clusters.topRight.barycenter);\r\n        const bottomLength = clusters.bottomLeft.barycenter.distance(clusters.bottomRight.barycenter);\r\n        const leftLength = clusters.topLeft.barycenter.distance(clusters.bottomLeft.barycenter);\r\n        const rightLength = clusters.topRight.barycenter.distance(clusters.bottomRight.barycenter);\r\n\r\n        return Math.abs(topLength - bottomLength) < Shape.shapeRecognitionPrecision\r\n            && Math.abs(leftLength - rightLength) < Shape.shapeRecognitionPrecision\r\n            && Shape.isOrthogonal(clusters.bottomLeft.barycenter, clusters.topLeft.barycenter, clusters.topRight.barycenter);\r\n    }\r\n\r\n    isLine(): boolean {\r\n        return this.points.length === 2\r\n            && Math.abs(this.points[0].y - this.points[1].y) < Shape.shapeRecognitionPrecision;\r\n    }\r\n\r\n    isRound(): boolean {\r\n        if (this.isRectangle() || this.isLine()) {\r\n            return false;\r\n        }\r\n\r\n        const circle = new Cluster();\r\n        this.points.forEach(point => {\r\n            circle.addPoint(point);\r\n        });\r\n\r\n        // if the points are not equally sprayed around the circle,\r\n        // the barycenter may be different from the actual center of the circle\r\n        const center = new Point(0.5, 0.5);\r\n        const radius2 = circle.points[0].distanceSquaredRounded(circle.barycenter);\r\n        const radiusCenter2 = circle.points[0].distanceSquaredRounded(center);\r\n\r\n        let isCircle = true;\r\n        let isCircleCentered = true;\r\n\r\n        circle.points.some(point => {\r\n            if (Math.abs(point.distanceSquaredRounded(circle.barycenter) - radius2) > Shape.shapeRecognitionPrecision * 2) {\r\n                isCircle = false;\r\n                return true;\r\n            }\r\n        });\r\n        circle.points.some(point => {\r\n            if (Math.abs(point.distanceSquaredRounded(center) - radiusCenter2) > Shape.shapeRecognitionPrecision * 2) {\r\n                isCircleCentered = false;\r\n                return true;\r\n            }\r\n        });\r\n\r\n        return isCircle || isCircleCentered;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { XmlCodeGenVisitor } from './xmlcodegenvisitor.service';\r\nimport { Shape } from './shape.service';\r\nimport { SvgCodeGenService } from '@xlayers/svg-codegen';\r\n\r\n/**\r\n * @see XmlCodeGenVisitor implementation that can be used to generate Xamarin.Forms code.\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class XamarinFormsCodeGenVisitor extends XmlCodeGenVisitor {\r\n  constructor(private readonly svgCodeGen: SvgCodeGenService) {\r\n    super();\r\n  }\r\n\r\n  fileList = [];\r\n\r\n  protected visitLayer(\r\n    layer: SketchMSLayer,\r\n    template: string[] = [],\r\n    depth: number = 0\r\n  ) {\r\n    let content;\r\n\r\n    if ((layer as any)._class === 'group') {\r\n      template.push(this.indent(depth, this.openGroup(layer)));\r\n      content = this.visit(layer, template, depth + 1);\r\n      template.push(this.indent(depth + 1, this.closeTag('AbsoluteLayout')));\r\n      template.push(this.indent(depth, this.closeTag('Frame')));\r\n    } else {\r\n      content = this.visit(layer, template, depth + 1);\r\n    }\r\n\r\n    if (content) {\r\n      template.push(this.indent(depth + 1, content));\r\n    }\r\n  }\r\n\r\n  protected visitBitmap(ast: SketchMSLayer): string {\r\n    return `<Image Source=\"${(ast as any).image._ref}\">`;\r\n  }\r\n\r\n  protected visitText(ast: SketchMSLayer): string {\r\n    const attr: any = {};\r\n    const string = ast.attributedString;\r\n    const fontAttribute =\r\n      string.attributes[0].attributes.MSAttributedStringFontAttribute\r\n        .attributes;\r\n    const colorAttribute = (string.attributes[0].attributes as any)\r\n      .MSAttributedStringColorAttribute;\r\n\r\n    attr.Text = string.string;\r\n    attr.FontSize = fontAttribute.size;\r\n    attr.FontFamily = fontAttribute.name;\r\n    attr.TextColor = this.colorRatioToHex(colorAttribute);\r\n    attr.Opacity = colorAttribute.alpha;\r\n    attr['AbsoluteLayout.LayoutBounds'] = `${Math.round(\r\n      ast.frame.x\r\n    )}, ${Math.round(ast.frame.y)}, ${Math.round(\r\n      ast.frame.width\r\n    )}, ${Math.round(ast.frame.height)}`;\r\n\r\n    return (\r\n      '<Label ' +\r\n      Object.keys(attr)\r\n        .map(function(key) {\r\n          return key + '=\"' + attr[key] + '\"';\r\n        })\r\n        .join('\\n' + ' '.repeat(7)) +\r\n      '/>'\r\n    );\r\n  }\r\n\r\n  protected visitShape(ast: SketchMSLayer): string {\r\n    if ((ast as any).shapeVisited === true) {\r\n      return null;\r\n    }\r\n\r\n    const a = new Shape((ast as any).points);\r\n    if (a.isRound()) {\r\n      return this.visitRound(ast);\r\n    } else if (a.isRectangle()) {\r\n      return this.visitRectangle(ast);\r\n    } else if (a.isLine()) {\r\n      return this.visitLine(ast);\r\n    } else {\r\n      return this.visitSvg(ast);\r\n    }\r\n  }\r\n\r\n  protected visitOther(ast: SketchMSLayer): string {\r\n    if ((ast as any).shapeVisited === true) {\r\n      return null;\r\n    }\r\n\r\n    if (\r\n      (ast as any)._class === 'oval' ||\r\n      ((ast as any)._class === 'rectangle' &&\r\n        (!!ast.style.fills || !!ast.style.borders))\r\n    ) {\r\n      return (\r\n        `<Frame ` +\r\n        this.generateAbsoluteLayout(ast) +\r\n        ` CornerRadius=\"${\r\n          (ast as any)._class === 'oval' ? ast.frame.width / 2 : '0'\r\n        }\"` +\r\n        (!!ast.style.fills\r\n          ? ' BackgroundColor=\"' +\r\n            this.colorRatioToHex(ast.style.fills[0].color) +\r\n            '\" Opacity=\"' +\r\n            ast.style.fills[0].color.alpha +\r\n            '\"'\r\n          : ' BackgroundColor=\"Transparent\"') +\r\n        (!!ast.style.borders\r\n          ? ' BorderColor=\"' +\r\n            this.colorRatioToHex(ast.style.borders[0].color) +\r\n            '\"'\r\n          : '') +\r\n        ' HasShadow=\"false\" />'\r\n      );\r\n    }\r\n  }\r\n\r\n  protected visitRound(ast: SketchMSLayer): string {\r\n    return (\r\n      `<Frame ` +\r\n      this.generateAbsoluteLayout(ast) +\r\n      ` CornerRadius=\"${ast.frame.width / 2}\"` +\r\n      (!!ast.style.fills\r\n        ? ' BackgroundColor=\"' +\r\n          this.colorRatioToHex(ast.style.fills[0].color) +\r\n          '\" Opacity=\"' +\r\n          ast.style.fills[0].color.alpha +\r\n          '\"'\r\n        : ' BackgroundColor=\"Transparent\"') +\r\n      (!!ast.style.borders\r\n        ? ' BorderColor=\"' +\r\n          this.colorRatioToHex(ast.style.borders[0].color) +\r\n          '\"'\r\n        : '') +\r\n      ' HasShadow=\"false\" />'\r\n    );\r\n  }\r\n\r\n  protected visitRectangle(ast: SketchMSLayer): string {\r\n    if (!!ast.style.borders) {\r\n      return (\r\n        `<Frame ` +\r\n        this.generateAbsoluteLayout(ast) +\r\n        ` CornerRadius=\"0\"` +\r\n        ` BorderColor=\"${this.colorRatioToHex(ast.style.borders[0].color)}\"` +\r\n        (!!ast.style.fills\r\n          ? ` BackgroundColor=\"${this.colorRatioToHex(\r\n              ast.style.fills[0].color\r\n            )}\"` + ` Opacity=\"${ast.style.fills[0].color.alpha}\"`\r\n          : ` BackgroundColor=\"Transparent\"`) +\r\n        ` HasShadow=\"false\" />`\r\n      );\r\n    } else if (!!ast.style.fills) {\r\n      return (\r\n        `<BoxView ` +\r\n        this.generateAbsoluteLayout(ast) +\r\n        ` Color=\"${this.colorRatioToHex(ast.style.fills[0].color)}\"` +\r\n        ` Opacity=\"${ast.style.fills[0].color.alpha}\" />`\r\n      );\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  protected visitLine(ast: SketchMSLayer): string {\r\n    return (\r\n      `<BoxView AbsoluteLayout.LayoutBounds=\"${Math.round(\r\n        ast.frame.x\r\n      )}, ${Math.round(ast.frame.y)}, ${Math.round(ast.frame.width)}, 1\"` +\r\n      (!!ast.style.fills\r\n        ? ` Color=\"${this.colorRatioToHex(ast.style.fills[0].color)}\"` +\r\n          ` Opacity=\"${ast.style.fills[0].color.alpha}\" />`\r\n        : ` Color=\"${this.colorRatioToHex(ast.style.borders[0].color)}\"` +\r\n          ` Opacity=\"${ast.style.borders[0].color.alpha}\" />`)\r\n    );\r\n  }\r\n\r\n  protected visitSvg(ast: SketchMSLayer): string {\r\n    const svgFileName = this.sanitizeSvgFileName(ast.do_objectID);\r\n    this.fileList.push({\r\n      ...this.svgCodeGen.aggregate(ast)[0],\r\n      uri: svgFileName,\r\n      kind: 'xamarinForms'\r\n    });\r\n\r\n    return (\r\n      `<ffSvg:SvgCachedImage Source=\"resource://xLayers.path.to.${svgFileName}\"` +\r\n      `\\n` +\r\n      ` `.repeat(22) +\r\n      this.generateAbsoluteLayout(ast) +\r\n      `/>`\r\n    );\r\n  }\r\n\r\n  protected openGroup(ast: SketchMSLayer): string {\r\n    const border = this.checkLayersForBorder(ast);\r\n    const background = this.checkLayersForBackground(ast);\r\n\r\n    return (\r\n      `<Frame ` +\r\n      this.generateAbsoluteLayout(ast) +\r\n      ` CornerRadius=\"0\" Padding=\"0\"` +\r\n      (border !== false ? ' BorderColor=\"' + border + '\"' : '') +\r\n      ' BackgroundColor=\"' +\r\n      (background !== false ? background : 'Transparent') +\r\n      '\"' +\r\n      ` HasShadow=\"false\">` +\r\n      `\\n  <AbsoluteLayout>`\r\n    );\r\n  }\r\n\r\n  private sanitizeSvgFileName(name: string): string {\r\n    return '_' + name.toLowerCase().replace(/[^a-z0-9\\_]/g, '_') + '.svg';\r\n  }\r\n\r\n  private generateAbsoluteLayout(ast: SketchMSLayer): string {\r\n    return `AbsoluteLayout.LayoutBounds=\"${Math.round(\r\n      ast.frame.x\r\n    )}, ${Math.round(ast.frame.y)}, ${Math.round(\r\n      ast.frame.width\r\n    )}, ${Math.round(ast.frame.height)}\"`;\r\n  }\r\n\r\n  consumeFileList(): any {\r\n    const tempFileList = this.fileList;\r\n    this.fileList = [];\r\n    return tempFileList;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CssCodeGenModule } from '@xlayers/css-codegen';\r\nimport { SketchLibModule } from '@xlayers/sketch-lib';\r\nimport { SvgCodeGenModule } from '@xlayers/svg-codegen';\r\n\r\n@NgModule({\r\n  imports: [CssCodeGenModule, SvgCodeGenModule, SketchLibModule]\r\n})\r\nexport class XamlCodeGenModule {}\r\n"],"names":[],"mappings":"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"}